
services:

  api :
    build:
      context: ${PROJECT_ROOT}
      dockerfile: ./docker/stage/Dockerfile.stage.api

    ports:
      - '${API_PORT:-3000}:${API_PORT:-3000}'

    environment:
      NODE_ENV: ${NODE_ENV}
      API_PORT: ${API_PORT}
      
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}

      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_CLOUDFRONT_URL: ${AWS_CLOUDFRONT_URL}

      MINIO_Region: ${MINIO_Region}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET: ${MINIO_BUCKET}

      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SECURE: ${SMTP_SECURE}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}

      VITE_WEB_PORT: ${VITE_WEB_PORT}
      VITE_ADMIN_PORT: ${VITE_ADMIN_PORT}

      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}


    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  


  db:
    image: postgres:latest
  
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} "] # ? make variables dynamic
      interval: 5s
      retries: 10
      timeout: 5s

    volumes:
      - db_stage_volume:/var/lib/postgresql/data

  redis:
    image: redis:latest

    ports:
      - 6379:6379

    volumes:
      - redis_stage_volume:/data
    
    command: ['redis-server', '--appendonly', 'yes'] # enables persistence


  minio:
    image: quay.io/minio/minio:latest
    
    ports:
      - '${MINIO_PORT:-9000}:${MINIO_PORT:-9000}' # S3 API
      - 9001:9001 # Web UI
    
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}

    volumes:
      - minio_stage_volume:/data
    
    command: server /data --console-address ":9001"
    
    

  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_started

    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_PORT: ${MINIO_PORT}
      MINIO_BUCKET: ${MINIO_BUCKET}


    volumes:
      - ${PROJECT_ROOT}/apps/api/src/seed/minio_client_seed_files:/seed # Your seed files
      - ${PROJECT_ROOT}/apps/api/init_minio_client.sh:/init_minio_client.sh # The script

    entrypoint: ['/bin/sh', '/init_minio_client.sh']


  mailpit:
      image: axllent/mailpit
      container_name: mailpit
      restart: unless-stopped
      ports:
          - 8025:8025 # Web UI
          - '${SMTP_PORT:-1025}:${SMTP_PORT:-1025}'


volumes:
  db_stage_volume:
    driver: local
  redis_stage_volume:
    driver: local
  minio_stage_volume:
    driver: local
