
services:

  api :
    build:
      context: ${PROJECT_ROOT}
      dockerfile: ./docker/dev/Dockerfile.dev.api
      

    env_file:
      - ${PROJECT_ROOT}/config/.env.dev
      - ${PROJECT_ROOT}/.env.local
      - ${PROJECT_ROOT}/.env
    
    ports:
      - '${API_PORT:-3000}:${API_PORT:-3000}'

    environment:
      CHOKIDAR_USEPOLLING: true
      WATCHPACK_POLLING: true
      # DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB}?schema=public ? e5i aparament tnjamm t3ml hakka , taken from chat

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

    volumes:
      - ${PROJECT_ROOT}/apps/api/src:/app/apps/api/src
      - ${PROJECT_ROOT}/apps/api/prisma:/app/apps/api/prisma


  web :
    build:
      context: ${PROJECT_ROOT}
      dockerfile: ./docker/dev/Dockerfile.dev.web
      
    env_file:
      - ${PROJECT_ROOT}/config/.env.dev
      - ${PROJECT_ROOT}/.env.local
      - ${PROJECT_ROOT}/.env
    
    environment:
      VITE_WEB_PORT : '${VITE_WEB_PORT:-3001}'
      VITE_API_PORT : '${API_PORT:-9000}'
      CHOKIDAR_USEPOLLING : true
      WATCHPACK_POLLING : true

    ports:
      - '${VITE_WEB_PORT:-3001}:${VITE_WEB_PORT:-3001}'

    volumes:
      - ${PROJECT_ROOT}/apps/web/src:/app/apps/web/src
      - ${PROJECT_ROOT}/apps/web/public:/app/apps/web/public



  admin :
    build:
      context: ${PROJECT_ROOT}
      dockerfile: ./docker/dev/Dockerfile.dev.admin
      
    env_file:
      - ${PROJECT_ROOT}/config/.env.dev
      - ${PROJECT_ROOT}/.env.local
      - ${PROJECT_ROOT}/.env

    environment:
      CHOKIDAR_USEPOLLING : true
      WATCHPACK_POLLING : true

    ports:
      - '${VITE_ADMIN_PORT:-3002}:${VITE_ADMIN_PORT:-3002}'
    
    volumes:
      - ${PROJECT_ROOT}/apps/admin/src:/app/apps/admin/src
      - ${PROJECT_ROOT}/apps/admin/public:/app/apps/admin/public
      


  db:
    image: postgres:latest
  
    env_file:
    - ${PROJECT_ROOT}/config/.env.dev
    - ${PROJECT_ROOT}/.env.local
    - ${PROJECT_ROOT}/.env

    ports:
    - '${DB_PORT:-5432}:${DB_PORT:-5432}'


    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} "] # ? make variables dynamic
      interval: 5s
      retries: 10
      timeout: 5s

    volumes:
      - db_data_dev:/var/lib/postgresql/data

  redis:
    image: redis:latest

    ports:
      - 6379:6379

    volumes:
      - redis_data:/data
    
    command: ['redis-server', '--appendonly', 'yes'] # enables persistence


  minio:
    image: quay.io/minio/minio:latest
    
    ports:
      - '${MINIO_PORT:-9000}:${MINIO_PORT:-9000}' # S3 API
      - 9001:9001 # Web UI
    
    env_file:
      - ${PROJECT_ROOT}/config/.env.dev
      - ${PROJECT_ROOT}/.env.local
      - ${PROJECT_ROOT}/.env

    volumes:
      - minio_data:/data
    
    command: server /data --console-address ":9001"
    
    

  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_started

    env_file:
      - ${PROJECT_ROOT}/config/.env.dev
      - ${PROJECT_ROOT}/.env.local
      - ${PROJECT_ROOT}/.env

    volumes:
      - ${PROJECT_ROOT}/apps/api/src/seed/minio_client_seed_files:/seed # Your seed files
      - ${PROJECT_ROOT}/apps/api/init_minio_client.sh:/init_minio_client.sh # The script

    entrypoint: ['/bin/sh', '/init_minio_client.sh']


  mailpit:
      image: axllent/mailpit
      container_name: mailpit
      restart: unless-stopped
      ports:
          - 8025:8025 # Web UI
          - '${SMTP_PORT:-1025}:${SMTP_PORT:-1025}'


volumes:
  db_data_dev:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
