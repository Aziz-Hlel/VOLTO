
services:

  reverse-proxy:
    build:
      context: ${PROJECT_ROOT}
      dockerfile: ./docker/prod/Dockerfile.prod.caddy
      args:
        VITE_NODE_ENV: ${NODE_ENV}
        VITE_API_URL: ${API_URL}

    ports:
      - 443:443
      - 80:80

    volumes:
      # - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy-prod-data:/data
      - caddy-prod-config:/config

  api :
    build:
      context: ${PROJECT_ROOT}
      dockerfile: ./docker/prod/Dockerfile.prod.api

    environment:
      NODE_ENV: ${NODE_ENV}
      API_PORT: ${API_PORT}

      API_URL: ${API_URL}
      WEB_URL: ${WEB_URL}
      ADMIN_URL: ${ADMIN_URL}

      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}

      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_CLOUDFRONT_URL: ${AWS_CLOUDFRONT_URL}

      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SECURE: ${SMTP_SECURE}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}

      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}

    command: sh -c "pnpm prisma migrate deploy && pnpm run seed:prod && node dist/main.js"

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
  


  db:
    image: postgres:latest
  
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} "] 
      interval: 5s
      retries: 10
      timeout: 5s

    volumes:
      - db_prod_volume:/var/lib/postgresql/data


  redis:
    image: redis:7.4-alpine

    volumes:
      - redis_prod_volume:/data
    
    command: ['redis-server', '--appendonly', 'yes'] # enables persistence

    


volumes:
  db_prod_volume:
    driver: local
  redis_prod_volume:
    driver: local
  caddy-prod-data:
    driver: local
  caddy-prod-config:
    driver: local
